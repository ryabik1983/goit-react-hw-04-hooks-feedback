{"version":3,"sources":["components/Statistics/Statistics.js","components/Feedback/FeedbackOptions.js","components/Notification/Notification.js","components/Section/Section.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","className","map","el","type","value","onClick","Notification","message","Section","title","state","handleIncrement","App","useState","setGood","setNeutral","setBad","feedback","countTotalFeedback","Math","round","isNaN","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAuBeA,EAtBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,gCACE,4CACA,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,YCcjBC,EAvBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,qBAAKC,UAAU,oBAAf,SACGF,EAAQG,KAAI,SAAAC,GAAE,OACb,wBAEEC,KAAK,SACLC,MAAOF,EACPG,QAAS,WACPN,EAAgBG,IALpB,SAQGA,GAPIA,SCIAI,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KC6CEC,EA1CC,SAAC,GAMV,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,MACAf,EAGI,EAHJA,MACAC,EAEI,EAFJA,mBACAe,EACI,EADJA,gBAEA,cAA+BD,EAA/B,GAAQlB,EAAR,KAAcC,EAAd,KAAuBC,EAAvB,KAcA,OACE,gCACE,6BAAKe,IACL,cAAC,EAAD,CAAiBV,gBAAiBY,EAAiBb,QAhBtC,CAAC,OAAQ,UAAW,SAiBhCH,EAAQ,EAdT,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAYpB,cAAC,EAAD,CAAcW,QAAS,6BCUhB,SAASK,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOrB,EAAP,KAAasB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOpB,EAAP,KAAgBsB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOnB,EAAP,KAAYsB,EAAZ,KAwBE,OACE,cAAC,EAAD,CACMP,MAAM,wBACNE,gBAzBc,SAAAM,GACN,SAAbA,GACDH,EAAQtB,EAAO,GAEA,YAAbyB,GACFF,EAAWtB,EAAU,GAEP,QAAbwB,GACDD,EAAOtB,EAAM,IAkBPgB,MAAO,CAAClB,EAAMC,EAASC,GACvBC,MAhBmB,SAACH,EAAMC,EAASC,GACzC,OAAOF,EAAOC,EAAUC,EAeXwB,CAAmB1B,EAAMC,EAASC,GACzCE,mBAbgC,SAACJ,EAAMC,EAASC,GACtD,IAAMC,EAAQH,EAAOC,EAAUC,EACzBE,EAAqBuB,KAAKC,MAAc,IAAP5B,EAAcG,GACrD,OAAO0B,MAAMzB,GAAsB,KAAUA,EAAqB,IAUxC0B,CAAgC9B,EAAMC,EAASC,KCvE/E6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.fbf6b291.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <div>\r\n      <h3>Statistics</h3>\r\n      <ul>\r\n        <li>Good: {good}</li>\r\n        <li>Neutral: {neutral}</li>\r\n        <li>Bad: {bad}</li>\r\n        <li>Total: {total}</li>\r\n        <li>Positive feedback: {positivePercentage}</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.string.isRequired,\r\n};\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <div className=\"Counter__controls\">\r\n      {options.map(el => (\r\n        <button\r\n          key={el}\r\n          type=\"button\"\r\n          value={el}\r\n          onClick={() => {\r\n            onLeaveFeedback(el);\r\n          }}\r\n        >\r\n          {el}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n// \"There is no feedback\"></Notification>\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\nexport default Notification;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Statistics from '../Statistics';\r\nimport FeedbackOptions from '../Feedback';\r\nimport Notification from '../Notification';\r\n\r\nconst Section = ({\r\n  title,\r\n  state,\r\n  total,\r\n  positivePercentage,\r\n  handleIncrement,\r\n}) => {\r\n  const [ good, neutral, bad ] = state;\r\n  const btnNames = ['good', 'neutral', 'bad'];\r\n  function renderStatistic() {\r\n    return (\r\n      <Statistics\r\n        good={good}\r\n        neutral={neutral}\r\n        bad={bad}\r\n        total={total}\r\n        positivePercentage={positivePercentage}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      <FeedbackOptions onLeaveFeedback={handleIncrement} options={btnNames} />\r\n      {total > 0 ? (\r\n        renderStatistic()\r\n      ) : (\r\n        <Notification message={'There is no feedback'} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  state: PropTypes.array.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.string.isRequired,\r\n  handleIncrement: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","// import logo from './logo.svg';\r\nimport './App.css';\r\nimport React, {useState} from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport Section from './components/Section';\r\n// import { render } from '@testing-library/react';\r\n\r\n\r\n// class App extends React.Component {\r\n//   state = {\r\n//     good: 0,\r\n//     neutral: 0,\r\n//     bad: 0,\r\n//   };\r\n\r\n//   handleIncrement = feedback => {\r\n//     const value = feedback;\r\n//     this.setState(prevState => ({ [value]: prevState[value] + 1 }));\r\n//   };\r\n//   countTotalFeedback({ good, neutral, bad }) {\r\n//     return good + neutral + bad;\r\n//   }\r\n//   countPositiveFeedbackPercentage({ good, neutral, bad }) {\r\n//     const total = good + neutral + bad;\r\n//     const positivePercentage = Math.round((good * 100) / total);\r\n//     return isNaN(positivePercentage) ? 0 + '%' : positivePercentage + '%';\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <Section\r\n//         title=\"Please leave feedback\"\r\n//         handleIncrement={this.handleIncrement}\r\n//         state={this.state}\r\n//         total={this.countTotalFeedback(this.state)}\r\n//         positivePercentage={this.countPositiveFeedbackPercentage(this.state)}\r\n//        />\r\n        \r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default App;\r\n\r\nexport default function App () {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n  \r\n  const handleIncrement = feedback => {\r\n    if(feedback === 'good'){\r\n      setGood(good + 1);\r\n    }  \r\n    if (feedback === 'neutral'){\r\n      setNeutral(neutral + 1);\r\n    }\r\n    if(feedback === 'bad'){\r\n      setBad(bad + 1);\r\n    }\r\n    };\r\n    const countTotalFeedback = (good, neutral, bad) => {\r\n      return good + neutral + bad;\r\n    };\r\n  \r\n    const countPositiveFeedbackPercentage = (good, neutral, bad) => {\r\n      const total = good + neutral + bad;\r\n      const positivePercentage = Math.round((good * 100) / total);\r\n      return isNaN(positivePercentage) ? 0 + '%' : positivePercentage + '%';\r\n    };\r\n\r\n  \r\n    return (\r\n      <Section\r\n            title=\"Please leave feedback\"\r\n            handleIncrement={handleIncrement}\r\n            state={[good, neutral, bad]}\r\n            total={countTotalFeedback(good, neutral, bad)}\r\n            positivePercentage={countPositiveFeedbackPercentage(good, neutral, bad)}\r\n           />\r\n      )\r\n\r\n  \r\n    \r\n    \r\n    \r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}